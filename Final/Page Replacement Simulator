#include <iostream>
using namespace std;

#define MAX_FRAMES 10
#define MAX_PAGES 100

class PageReplacement {
private:
    int frames[MAX_FRAMES], numFrames;
public:
    PageReplacement(int n) {
        numFrames = n;
        for (int i = 0; i < numFrames; i++)
            frames[i] = -1;
    }
    void FIFO(int pages[], int n);
    void LRU(int pages[], int n);
    void Optimal(int pages[], int n);
};

// FIFO Page Replacement Algorithm
void PageReplacement::FIFO(int pages[], int n) {
    int index = 0, pageFaults = 0;
    for (int i = 0; i < n; i++) {
        bool found = false;
        for (int j = 0; j < numFrames; j++)
            if (frames[j] == pages[i]) found = true;

        if (!found) {
            frames[index] = pages[i];
            index = (index + 1) % numFrames;
            pageFaults++;
        }
    }
    cout << "FIFO Page Faults: " << pageFaults << endl;
}

// LRU Page Replacement Algorithm
void PageReplacement::LRU(int pages[], int n) {
    int recent[MAX_FRAMES], pageFaults = 0;
    for (int i = 0; i < numFrames; i++)
        recent[i] = -1;

    for (int i = 0; i < n; i++) {
        bool found = false;
        for (int j = 0; j < numFrames; j++) {
            if (frames[j] == pages[i]) {
                found = true;
                recent[j] = i;
                break;
            }
        }
        if (!found) {
            int lruIndex = 0;
            for (int j = 1; j < numFrames; j++)
                if (recent[j] < recent[lruIndex]) lruIndex = j;

            frames[lruIndex] = pages[i];
            recent[lruIndex] = i;
            pageFaults++;
        }
    }
    cout << "LRU Page Faults: " << pageFaults << endl;
}

// Optimal Page Replacement Algorithm
void PageReplacement::Optimal(int pages[], int n) {
    int pageFaults = 0;
    for (int i = 0; i < n; i++) {
        bool found = false;
        for (int j = 0; j < numFrames; j++)
            if (frames[j] == pages[i]) found = true;

        if (!found) {
            int replaceIndex = -1, farthest = i;
            for (int j = 0; j < numFrames; j++) {
                int k;
                for (k = i + 1; k < n; k++)
                    if (frames[j] == pages[k]) break;

                if (k == n) {
                    replaceIndex = j;
                    break;
                }
                if (k > farthest) {
                    farthest = k;
                    replaceIndex = j;
                }
            }
            frames[replaceIndex] = pages[i];
            pageFaults++;
        }
    }
    cout << "Optimal Page Faults: " << pageFaults << endl;
}

int main() {
    int numFrames, numPages, pages[MAX_PAGES], choice;
    cout << "Enter number of frames: ";
    cin >> numFrames;
    cout << "Enter number of pages: ";
    cin >> numPages;

    cout << "Enter page sequence: ";
    for (int i = 0; i < numPages; i++)
        cin >> pages[i];

    PageReplacement simulator(numFrames);

    do {
        cout << "\nChoose Algorithm:\n1. FIFO\n2. LRU\n3. Optimal\n4. Exit\nChoice: ";
        cin >> choice;
        switch (choice) {
            case 1: simulator.FIFO(pages, numPages); break;
            case 2: simulator.LRU(pages, numPages); break;
            case 3: simulator.Optimal(pages, numPages); break;
            case 4: cout << "Exiting...\n"; break;
            default: cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 4);

    return 0;
}
