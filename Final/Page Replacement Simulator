#include <iostream>
using namespace std;

// Function to check if a page is in memory
bool isPresent(int frame[], int frames, int page) {
    for (int i = 0; i < frames; i++) {
        if (frame[i] == page)
            return true;
    }
    return false;
}

// FIFO Page Replacement Algorithm
void FIFO(int pages[], int n, int frames) {
    int frame[frames], front = 0, count = 0;
    for (int i = 0; i < frames; i++) frame[i] = -1;
    
    for (int i = 0; i < n; i++) {
        if (!isPresent(frame, frames, pages[i])) {
            frame[front] = pages[i];
            front = (front + 1) % frames;
            count++;
        }
    }
    cout << "FIFO Page Faults: " << count << endl;
}

// LRU Page Replacement Algorithm
void LRU(int pages[], int n, int frames) {
    int frame[frames], time[frames], count = 0;
    for (int i = 0; i < frames; i++) frame[i] = -1, time[i] = 0;
    
    for (int i = 0; i < n; i++) {
        if (!isPresent(frame, frames, pages[i])) {
            int lru = 0;
            for (int j = 1; j < frames; j++)
                if (time[j] < time[lru]) lru = j;
            frame[lru] = pages[i];
            time[lru] = i;
            count++;
        } else {
            for (int j = 0; j < frames; j++)
                if (frame[j] == pages[i]) time[j] = i;
        }
    }
    cout << "LRU Page Faults: " << count << endl;
}

// Optimal Page Replacement Algorithm
void Optimal(int pages[], int n, int frames) {
    int frame[frames], count = 0;
    for (int i = 0; i < frames; i++) frame[i] = -1;
    
    for (int i = 0; i < n; i++) {
        if (!isPresent(frame, frames, pages[i])) {
            int replace = 0, farthest = i;
            for (int j = 0; j < frames; j++) {
                int k;
                for (k = i + 1; k < n; k++) {
                    if (frame[j] == pages[k]) {
                        if (k > farthest) {
                            farthest = k;
                            replace = j;
                        }
                        break;
                    }
                }
                if (k == n) {
                    replace = j;
                    break;
                }
            }
            frame[replace] = pages[i];
            count++;
        }
    }
    cout << "Optimal Page Faults: " << count << endl;
}

int main() {
    int choice, n, frames;
    cout << "Enter number of pages: ";
    cin >> n;
    int pages[n];
    cout << "Enter the page reference sequence: ";
    for (int i = 0; i < n; i++) cin >> pages[i];
    cout << "Enter number of frames: ";
    cin >> frames;
    
    do {
        cout << "\nPage Replacement Algorithms:\n";
        cout << "1. FIFO\n";
        cout << "2. LRU\n";
        cout << "3. Optimal\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        
        switch (choice) {
            case 1:
                FIFO(pages, n, frames);
                break;
            case 2:
                LRU(pages, n, frames);
                break;
            case 3:
                Optimal(pages, n, frames);
                break;
            case 4:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice, please try again!\n";
        }
    } while (choice != 4);
    
    return 0;
}
